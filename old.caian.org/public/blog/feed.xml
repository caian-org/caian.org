<?xml version="1.0" encoding="UTF-8"?> <rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"> <channel> <title>caian.org</title> <description>Personal page, blog, portfolio etc</description> <link>https://caian.org/</link> <atom:link href="https://caian.org/feed.xml" rel="self" type="application/rss+xml"/> <pubDate>Thu, 20 Oct 2022 02:35:53 -0300</pubDate> <lastBuildDate>Thu, 20 Oct 2022 02:35:53 -0300</lastBuildDate> <generator>Jekyll v4.2.2</generator> <item> <title>Have your own website</title> <description> </description> <pubDate>Thu, 20 Oct 2022 00:00:00 -0300</pubDate> <link>https://caian.org/blog/2022/10/20/have-your-own-website.html</link> <guid isPermaLink="true">https://caian.org/blog/2022/10/20/have-your-own-website.html</guid> <category>blog</category> </item> <item> <title>Faster builds, please</title> <description>&lt;p&gt;It’s been only a couple of days since I’ve &lt;a href=&quot;/blog/2021/11/06/starting-again.html&quot;&gt;started again&lt;/a&gt; and more things have changed over here. I’ve quickly discovered, after half a dozen deploys, about some of the inconveniences of Cloudflare Pages that people didn’t seem to care enough to talk about. Here’s what I’ve noticed:&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The worker startup is painfully slow&lt;/strong&gt;. Every time a new change hits GitHub, a new build is triggered on Pages and so a new worker must be started to actually build and release the website into the internet. And for some unknown reason, the startup process alone was taking half of the average needed time – 5 to 6 minutes to run the entire pipeline and half of it was just to spin-up the VM (or container, I don’t know). And this behaviour happened consistently.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The installation of dependencies are mandatory&lt;/strong&gt;. If pages detects a manifest file – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pipfile&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; etc – it &lt;strong&gt;will&lt;/strong&gt; install of it’s dependencies. You simply cannot skip this. This might not sound that bad, but…&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Cloudflare Pages don’t cache your build&lt;/strong&gt;. No, I’m not talking about Cloudflare’s CDN. I’m talking about all the node modules and other stuff generated at build time. Again, this might not sound that bad, but jekyll for instance relies on Ruby gems that binds to C code, which of course are system / arch-dependent and must be compiled every time. Having the option to specify a list of directories that must be cached between executions would greatly improve the build speed.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;so&quot;&gt;So??&lt;/h2&gt; &lt;p&gt;Yes, a 5 minutes pipeline is not a lot, but it felt wasteful, so I did some changes…&lt;/p&gt; &lt;ol&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;The build is now being made on Github Actions&lt;/strong&gt; and the modules / packages / libs are now cacheable. The first run took 5 minutes just to install and compile all the dependencies; the subsequent ones, only 4 seconds. An entire build pipeline takes no more than a minute now.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;The builded files – HTML pages and stylesheets – have their own place now: a &lt;a href=&quot;https://github.com/caian-org/caian.org-dist&quot;&gt;separate git repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;This site is not on Cloudflare Pages anymore&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The pipeline is a little more complex, but more faster (on average, 2 minutes from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git push&lt;/code&gt; to a new site version be live on the internet). A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; triggers the GitHub Action that builds the site and commits to the other repository, which in turn triggers &lt;a href=&quot;https://render.com&quot;&gt;Render&lt;/a&gt; – I’ve talked about this guy last post. Render can do it’s job in a little more than a minute – here’s what a build outlook looks like:&lt;/p&gt; &lt;div class=&quot;language-verilog highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cloning&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//github.com/caian-org/caian.org-dist...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;41&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Checking&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;081&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d48b&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;master&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Downloading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;57&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Downloaded&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MB&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Extraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;took&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;06&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Using&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Python&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.7.10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;skipping&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Uploading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Nov&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;52&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;live&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;🎉&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;where-will-you-be-next-month&quot;&gt;Where will you be next month?&lt;/h2&gt; &lt;p&gt;I don’t plan to leave Render this soon, but I’ll not make any promises. If I could strip down one more build minute by going somewhere else, I would. For now I’m overall happy with this new format / build process.&lt;/p&gt; </description> <pubDate>Thu, 25 Nov 2021 00:00:00 -0300</pubDate> <link>https://caian.org/blog/2021/11/25/faster-builds-please.html</link> <guid isPermaLink="true">https://caian.org/blog/2021/11/25/faster-builds-please.html</guid> <category>development</category> <category>updates</category> <category>blog</category> </item> <item> <title>Starting again</title> <description>&lt;p&gt;This project is alive once again. Last time I’ve poured energy into this, the site was still running on a self-managed nginx server at Vultr. Turns out I’m lazy and after a couple of months I gave up and deleted everything – one OpenBSD and two CentOS servers.&lt;/p&gt; &lt;p&gt;Don’t get me wrong: hosting your own shit is all fun and games, but – for me at least – it gets boring way too quickly. Oh well…&lt;/p&gt; &lt;h2 id=&quot;on-finding-a-new-landlord&quot;&gt;On finding a new landlord&lt;/h2&gt; &lt;p&gt;Static websites are cool again, so there’s actually a couple of options to choose from: &lt;a href=&quot;https://surge.sh&quot;&gt;surge&lt;/a&gt;, &lt;a href=&quot;https://vercel.com&quot;&gt;vercel&lt;/a&gt;, &lt;a href=&quot;https://render.com&quot;&gt;render&lt;/a&gt;, &lt;a href=&quot;https://pages.github.com&quot;&gt;github pages&lt;/a&gt;, &lt;a href=&quot;https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html&quot;&gt;aws s3&lt;/a&gt;, &lt;a href=&quot;https://www.netlify.com&quot;&gt;netlify&lt;/a&gt;, &lt;a href=&quot;https://www.digitalocean.com&quot;&gt;digital ocean&lt;/a&gt; and (the winner) &lt;a href=&quot;https://pages.cloudflare.com&quot;&gt;cloudflare pages&lt;/a&gt;. You can most certainly find other options, but that’s how far I got on a 15 min search.&lt;/p&gt; &lt;p&gt;Most of them are problematic in some way:&lt;/p&gt; &lt;ul&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Surge&lt;/strong&gt; is the most interesting of all: you install a node package on your system, build your website locally and upload the dist with a single command. That’s it. No pipeline, no nothing. You can even add your own custom domain, but if you want secure (HTTPS) connections, you have to pay. 30 dollars, monthly, to be more specific. That’s a &lt;strong&gt;NO&lt;/strong&gt; for me.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;AWS S3&lt;/strong&gt; has a similar approach, but the setup is more time consuming, the update (of pages) requires manual steps – although you can automate that on a CI/CD service – and, as always (that’s the AWS way of doing things), there are some hidden costs, such as cloudfront – if you pretend to serve content over HTTPS. Not appealing, actually.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;GitHub Pages&lt;/strong&gt; is an old buddy that has only one friend: Jekyll. And even this good ol’ friend is dealt with limitations: not all plugins are allowed and you can’t use anything besides Jekyll. Does your site need some help from another program? Perhaps you’re planning to use Gulp, Webpack or whatever to build? Then no deal.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Netlify&lt;/strong&gt; and &lt;strong&gt;Digital Ocean&lt;/strong&gt; are similar in their features, limitations and price model: you can use your own domain with a free SSL certificate and bring code from GitHub with automatic builds. But they limit your monthly build time (in minutes). Netlify gives you 300 minutes per month free. Digital Ocean gives you even less: 100 minutes per month and only 1 GB of outbound data transfer.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vercel&lt;/strong&gt; is less about static websites and more about FaaS (function-as-a-service) and custom stuff like NextJS. In a way, hosting a site on vercel is similar to doing on S3: you can absolutely do it, but most people aren’t, so the territory seems unfit.&lt;/p&gt; &lt;/li&gt; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; and &lt;strong&gt;Cloudflare Pages&lt;/strong&gt; seemed the most fit for the job: in both cases, you just connect the service to your GitHub account and the repository where the site is, provide a build command – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; or whatever – and that’s it. You can use your own domain and it will automatically be served over HTTPS. I’ve choosed the later only because I’m already using Cloudflare’s DNS services. That’s pretty much the only reason for not choosing Render. In the future, if Cloudflare introduces restrictions or even a price on their static site service, I’ll 100% be migrating to Render.&lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;pug-sass-gulp-and-other-front-end-toys&quot;&gt;Pug, SASS, Gulp and other front-end toys&lt;/h2&gt; &lt;p&gt;I’m no expert on this field – you probably figured this out by seeing how simple this whole website is. I’ve never liked how bloated the front-end stack is and I plan to never ever work professionaly with this clusterfuck of frameworks and tooling. Despite my sincerely belief that the modern web is fucked beyond repair, it is fun to mess around and see how many different hammers I can use to hit the same nail.&lt;/p&gt; &lt;p&gt;Of course I &lt;strong&gt;could&lt;/strong&gt; use plain HTML and CSS for the job, but why not complicate everything and introduce many different levels of abstractions on top of it? Again: I &lt;strong&gt;do not&lt;/strong&gt; plan to make sites professionaly, so bodging and gluing stuff on top of other stuff is not only okay but fun in a perverse sense.&lt;/p&gt; &lt;p&gt;I’ve rewrote the CSS to SASS, the HTML to Pug and built a transpilation process on top of Jekyll using Gulp. There’s a lot of Liquid templating that could be removed using Pug’s features like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;include&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extends&lt;/code&gt; and inline javascript – that will be done another day. For the time being, I’ll say this project is stable enough to be tagged &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1.0.0&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;silly-additions-and-the-future&quot;&gt;Silly additions and the future&lt;/h2&gt; &lt;p&gt;It took me more than 100 commits over a timespan of two weeks to get to this point. Besides the new tooling and fancy abstractions, I’ve also added some actually useful features here:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Blog posts now have tags and an estimated read time;&lt;/li&gt; &lt;li&gt;The dark theme is less broken;&lt;/li&gt; &lt;li&gt;Syntax highlighting on code block is improved;&lt;/li&gt; &lt;li&gt;The &lt;a href=&quot;/files&quot;&gt;files&lt;/a&gt; section is now being generated at build time.&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;Look how colorful it is (&lt;a href=&quot;#silly-additions-and-the-future&quot; onclick=&quot;changeTheme()&quot;&gt;click here&lt;/a&gt; to change the theme):&lt;/p&gt; &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;longest_repetition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chars&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chunk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:itself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;max_by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;There’s much yet to be done and I’m sure that I’ll broke many things in the process. If everything went accordingly, much will flourish the next year. What will flourish is another story… but it will. Have faith in me.&lt;/p&gt; </description> <pubDate>Sat, 06 Nov 2021 00:00:00 -0300</pubDate> <link>https://caian.org/blog/2021/11/06/starting-again.html</link> <guid isPermaLink="true">https://caian.org/blog/2021/11/06/starting-again.html</guid> <category>development</category> <category>updates</category> <category>blog</category> </item> </channel> </rss>